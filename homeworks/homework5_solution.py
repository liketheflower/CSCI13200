
"""
Due the following class and we will talk the solution at the beginning of the following class.
Please ONLY submit it to black board. 

1. Write a function to get the sum of 1 to n(inclusively). Using both bottom up and top down ways to explain your solution and write the code. (hint: You can initialize the s=[0]*(n+1). Then s[0]=0, s[1]=s[0]+1, s[2]=s[1]+2 ... s[n]=s[n-1]+n)
"""

def s(n):
    if n==0:return 0
    return s(n-1)+n
print(s(512))
"""
2(this one is optional). Write a function to caculate the factorial(n). Using both bottom up and top down ways to explain your solution and write the code. (hint: factorial(n) = 1*2*3*(n-1)*n = (1*2*3..*(n-1)) * n = factorial(n-1)*n )
"""
def factorial(n):
    if n==1:return 1
    return factorial(n-1)*n
print(factorial(4))
"""
3. given a list a
for all two consecutive elements: a[i], a[i+1], return the pair which has the maximum value of a[i]+a[i+1]. Return the indexes of these two items.

Example 1:
a = [1, 2, 3, 4]
the maximum pair will be 3 and 4. So the maximum value will be 3+4
the indexes will be 2, 3.
Example 2:
a = [1, 20, -30, 4, 18, -19]
the maximum pair will be 4 and 18. So the maximum value will be 4+18
the indexes will be 3, 4.
"""
def get_max(a):
    max_ = -float('inf')
    idx = 0
    print(a)
    for i, item in enumerate(a):
        print(i, item)
        if item > max_:
            max_ = item
            idx = i
    return max_, idx

def get_max_neighbors(a):
    max_ = -float('inf')
    idx = 0
    print(a)
    for i in range(len(a)-1):
        current_neighbor_sum = a[i] + a[i+1]
        print(i, current_neighbor_sum)
        if current_neighbor_sum > max_:
            max_ = current_neighbor_sum
            idx = i
    return max_, idx, idx+1

def get_max_neighbors_v2(a):
    neighbor_sums = []
    for i in range(len(a)-1):
        current_neighbor_sum = a[i] + a[i+1]
        neighbor_sums.append(current_neighbor_sum)
    print(neighbor_sums)
    max_ = max(neighbor_sums)
    idx = neighbor_sums.index(max_)
    return max_, idx, idx+1
def get_max_neighbors_v3(a):
    neighbor_sums = []
    for i in range(len(a)-1):
        current_neighbor_sum = a[i] + a[i+1]
        neighbor_sums.append([current_neighbor_sum, i, i+1])
    print(neighbor_sums)
    return max(neighbor_sums)
def get_max_neighbors_v4(a):
    neighbor_sums = [[a[i] + a[i+1], i, i+1]
                                      for i in range(len(a)-1) ]
    print(neighbor_sums)
    return max(neighbor_sums)

a = [1, 20, -30, 4, 18, -19]
print(get_max(a))
print(get_max_neighbors(a))
print(get_max_neighbors_v2(a))
print(get_max_neighbors_v3(a))
print(get_max_neighbors_v4(a))
"""
4. The following list :
                   [[0, 0],[0, 1], [0, 2],
                    [1, 0],[1, 1], [1, 2]]
    can be easiler generated by using:
a=[[i,j] for i in range(2)
         for j in range(3)]
Try to run the following code to see what will happen.


a=[[i,j] for i in range(5)
         for j in range(10)]
b = sorted(a, reverse=True)
print(b)

5(optional). Try to create your own repo on github and save your codes there.
"""
