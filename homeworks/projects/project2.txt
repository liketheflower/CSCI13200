Design your own first generation programming language with the help of the higher generation language

Task 1: add two numbers a=2, b=3 and get the result.

python code:
a, b = 2, 3
res = a+b

Pseudocode:
read main memory[0] to register $01
read main memory[1] to register $02
add register $1 and register $2 and save the result to register $3
write result from register $3 to memory[2]
Halt


READ MEMO[0], $1, 0
READ MEMO[1], $2, 0
ADD $1, $2, $3
WRITE $3, MEMO[2], 0
HALT


READ 0, 1, 0
READ 1, 2, 0
ADD 1, 2, 3
WRITE 3, 2, 0
HALT


READ : 0
WRITE: 1
ADD  : 2
HALT : 255 


0, 0, 1, 0
0, 1, 2, 0
2, 1, 2, 3
1, 3, 2, 0
255,0, 0, 0

convert them into hex

00, 00, 01, 00
00, 01, 02, 00
02, 01,02, 03
01, 03, 02, 00
FF, 00, 00, 00

Task 2: swap a, b
python code:
a, b = b, a

Your own code


Task 3: sum([1, 2, 3, 4, 5, 6,7, 8, 9, 10])
python code:
sum(range(1, 11))

or 
res = 0
for i in range(1, 11):
    res += i


Hint:
Put beginning number of i which is 1 at memory[B0], ending number of i which is 10 at memory[E0]

1. read the beginning number of i to register 01
READ MEMO[0] $1
2. read the endding number of i to register 02
READ MEMO[1] $2
3. set the initial res as 0 and save the result in register 03
READ MEMO[2] $3
4. add register 03 with value i which is saved in register 03
res += i
res = res + i
ADD  $res $i $res
ADD  $3 $1 $3
5. increase i by 1
 i = i + 1
$1 = $1 + 1
ADDI $1, 1, $1
6.0 compare i to target
COMP $i $target STEP4
COMP $1 $2 STEP4
6.1. if i==target: stop
6.2. else: go to step 4
7. Halt
"""

READ MEMO[0] $1
READ MEMO[1] $2
READ MEMO[2] $3
ADD  $3 $1 $3
ADDI $1, 1, $1
COMP $1 $2 STEP4
HALT
"""
READ 0, 1, 0
READ 1, 2, 0
READ 2, 3, 0
ADD  3, 1, 3
ADDI 1, 1,  1
COMP 1, 2, STEP4
(meaning of COMP, compare register a and register b, if they are not equal, go to the indicated step)
HALT


READ : 0
WRITE: 1
ADD  : 2
ADDi  : 3
COMP : 4
HALT : 255 





